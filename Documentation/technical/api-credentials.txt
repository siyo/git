credentials API
===============

The credentials API provides an abstracted way of gathering username and
password credentials from the user (even though credentials in the wider
world can take many forms, in this document the word "credential" always
refers to a username and password pair).

Data Structures
---------------

`struct credential`::

	This struct represents a single username/password combination
	along with any associated context. All string fields should be
	heap-allocated (or NULL if they are not known or not applicable).
	The meaning of the individual context fields is the same as
	their counterparts in the helper protocol; see the section below
	for a description of each field.
+
The `helpers` member of the struct is a `string_list` of helpers.  Each
string specifies an external helper which will be run, in order, to
either acquire or store credentials. See the section on credential
storage helpers below.
+
This struct should always be initialized with `CREDENTIAL_INIT` or
`credential_init`.


Functions
---------

`credential_init`::

	Initialize a credential structure, setting all fields to empty.

`credential_clear`::

	Free any resources associated with the credential structure,
	returning it to a pristine initialized state.

`credential_fill`::

	Attempt to fill the username and password fields of the passed
	credential struct, first consulting storage helpers, then asking
	the user. Guarantees that the username and password fields will
	be filled afterwards (or die() will be called).

`credential_reject`::

	Inform the credential subsystem that the provided credentials
	have been rejected. This will notify any storage helpers of the
	rejection (which allows them to, for example, purge the invalid
	credentials from storage), and then clear the username and
	password fields in `struct credential`. It can then be
	`credential_fill`-ed again.

`credential_approve`::

	Inform the credential subsystem that the provided credentials
	were successfully used for authentication. This will notify any
	storage helpers of the approval, so that they can store the
	result to be used again.

`credential_from_url`::

	Parse a URL into broken-down credential fields.

Credential Storage Helpers
--------------------------

Credential storage helpers are programs executed by git to fetch or save
credentials from and to long-term storage (where "long-term" is simply
longer than a single git process; e.g., credentials may be stored
in-memory for a few minutes, or indefinitely on disk).

Helper scripts should generally be found in the PATH, and have names of
the form "git-credential-$HELPER". When the helper string "$HELPER" is
passed to credential functions, they will run "git-credential-$HELPER"
via the shell. If the first word of $HELPER contains non-alphanumeric
characters, then $HELPER is executed as a shell command. This makes it
possible to specify individual scripts by their full path (e.g.,
`/path/to/helper`) or even shell snippets (`f() { do_whatever; }; f`).

When a helper is executed, it will have one "operation" argument
appended to its command line, which is one of:

`get`::

	Return a matching credential, if any exists.

`store`::

	Store the credential, if applicable to the helper.

`erase`::

	Remove a matching credential, if any, from the helper's storage.

The details of the credential will be provided on the helper's stdin
stream. The credential is split into a set of named attributes.
Attributes are provided to the helper, one per line. Each attribute is
specified by a key-value pair, separated by an `=` (equals) sign,
followed by a newline. The key may contain any bytes except `=` or
newline. The value may contain any bytes except a newline.  In both
cases, all bytes are treated as-is (i.e., there is no quoting, and one
cannot transmit a value with newline in it). The list of attributes is
terminated by a blank line or end-of-file.

Git will send the following attributes (but may not send all of
them for a given credential; for example, a `host` attribute makes no
sense when dealing with a non-network protocol):

`protocol`::

	The protocol over which the credential will be used (e.g.,
	`https`).

`host`::

	The remote hostname for a network credential.

`path`::

	The path with which the credential will be used. E.g., for
	accessing a remote https repository, this will be the
	repository's path on the server.

`username`::

	The credential's username, if we already have one (e.g., from a
	URL, from the user, or from a previously run helper).

`password`::

	The credential's password, if we are asking it to be stored.

For a `get` operation, the helper should produce a list of attributes
on stdout in the same format. A helper is free to produce a subset, or
even no values at all if it has nothing useful to provide. Any provided
attributes will overwrite those already known about by git.

For a `store` or `erase` operation, the helper's output is ignored.
If it fails to perform the requested operation, it may complain to
stderr to inform the user. If it does not support the requested
operation (e.g., a read-only store), it should silently ignore the
request.

If a helper receives any other operation, it should silently ignore the
request. This leaves room for future operations to be added (older
helpers will just ignore the new requests).
